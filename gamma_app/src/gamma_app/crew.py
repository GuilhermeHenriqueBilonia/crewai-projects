from typing import Any, Dict
from crewai import Agent, Crew, Process, Task
from crewai.task import TaskOutput
from crewai.project import CrewBase, agent, crew, task
from tools.custom_tool import search_tool
from langchain_core.callbacks import BaseCallbackHandler
import streamlit as st

# Uncomment the following line to use an example of a custom tool

# Check our tools documentations for more information on how to use them
# from crewai_tools import SerperDevTool

def step_callback(output):
	"""Example of a step callback function"""
	text_agent = 'Pesquida finalizada' if 'Pesquisador' in output.agent else 'Resumo finalizado' if 'Resumidor' in output.agent else 'Apresentação finalizada'
	with st.status(text_agent):
		raw = f'{output.agent}: {output.raw}'
		st.session_state.messages.append({"role": "assistant", "content": raw})
		st.chat_message("assistant").markdown(raw)

class CustomHandler(BaseCallbackHandler):
    """A custom handler for logging interactions within the process chain."""
    
    def __init__(self, agent_name: str):
        super().__init__()
        self.agent_name = agent_name

    def on_chain_start(self, serialized: Dict[str, Any], outputs: Dict[str, Any], **kwargs: Any):
        """Log the start of a chain with user input."""
        st.session_state.messages.append({"role": "assistant", "content": outputs['input']})
        st.chat_message("assistant").markdown(outputs['input'])

    def on_agent_action(self, serialized: Dict[str, Any], inputs: Dict[str, Any], **kwargs: Any):
        """Log the action taken by an agent during a chain run."""
        st.session_state.messages.append({"role": "assistant", "content": inputs['input']})
        st.chat_message("assistant").markdown(inputs['input'])

    def on_chain_end(self, outputs: Dict[str, Any], **kwargs: Any):
        """Log the end of a chain with the output generated by an agent."""
        st.session_state.messages.append({"role": self.agent_name, "content": outputs['output']})
        st.chat_message(self.agent_name).markdown(outputs['output'])

@CrewBase
class GammaAppCrew():
	"""TaianeViagens crew"""

	@agent
	def pesquisador(self) -> Agent:
		return Agent(
			config=self.agents_config['pesquisador'],
			tools=[search_tool], # Example of custom tool, loaded on the beginning of file
			verbose=True,
		)

	@agent
	def resumidor(self) -> Agent:
		return Agent(
			config=self.agents_config['resumidor'],
			verbose=True,
			
		)
	
	@agent
	def criador(self) -> Agent:
		return Agent(
			config=self.agents_config['criador'],
			verbose=True,
			
		)

	@task
	def pesquisar(self) -> Task:
		return Task(
			config=self.tasks_config['pesquisador_task'],
   			callback=step_callback
		)

	@task
	def resumir(self) -> Task:
		return Task(
			config=self.tasks_config['resumidor_task'],
   			callback=step_callback
		)
  
	@task
	def criar(self) -> Task:
		return Task(
			config=self.tasks_config['criador_task'],
   			callback=step_callback
		)

	@crew
	def crew(self) -> Crew:
		"""Creates the TaianeViagens crew"""
		return Crew(
			agents=self.agents, # Automatically created by the @agent decorator
			tasks=self.tasks, # Automatically created by the @task decorator
			process=Process.sequential,
			verbose=True,
			language='pt-br',
			memory=True,
			
			# process=Process.hierarchical, # In case you wanna use that instead https://docs.crewai.com/how-to/Hierarchical/
		)