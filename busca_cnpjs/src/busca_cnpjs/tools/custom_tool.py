import json
from typing import Any, Dict
from crewai_tools import BaseTool, SerperDevTool, ScrapeWebsiteTool
import requests
import pandas as pd
import pyodbc
import streamlit as st
from langchain_core.callbacks import BaseCallbackHandler
from autogen import AssistantAgent, UserProxyAgent

search_tool = SerperDevTool()

scrap_ibge = ScrapeWebsiteTool(website_url="https://www.ibge.gov.br/explica/codigos-dos-municipios.php")
scrap_documentacao = ScrapeWebsiteTool(website_url="https://www.cnpj.ws/docs/api-comercial/pesquisa-de-empresas")

class HumanTool(BaseTool):
    name: str = "Human interact"
    description: str = (
        "Fazer perguntas ao usuário para coletar informações"
    )

    def _run(self, argument: str) -> str:
        # Implementation goes here
        print(argument)
        res = input(f"{argument} \n")
        return res
    
    
class IntegrarCnpjTool(BaseTool):
    name: str = "Buscar CNPJs da receita"
    description: str = (
        "Executar integração e buscar CNPJs da receita federal"
    )

    def _run(self, url: str) -> str:
        """Tarefa recebe uma URL String usada para executar busca de CNPJs"""
        final_url = ''
        if 'url' in url:
            json_url = json.loads(url)
            final_url = json_url['url']
        elif 'input' in url:
            json_url = json.loads(url)
            final_url = json_url['url']
        else:
            final_url = url
        cnpjs = []
        headers = {}
        headers["x_api_token"] = "ePORGdl4807pcBor3pMmavZIHYx6GLQb45Wo-2h-w6SI"


        resp = requests.get(f'{final_url}&pagina=1&limite=100', headers=headers)
        
        total_paginas = resp.json()['paginacao']['paginas']
        if total_paginas > 1:
            cnpjs += resp.json()['data']
            for page in range(total_paginas):
                if page > 1:
                    url = url.replace('pagina=1', f'pagina={page}')
                    respInt = requests.get(final_url, headers=headers)
                    cnpjs += respInt.json()['data']
        else:
            cnpjs = resp.json()['data']
            
        return cnpjs
    
    
class VerificarSqlQuery(BaseTool):
    name: str = "Buscar CNPJs no banco de dados"
    description: str = (
        "Executa query e busca os CNPJs no banco de dados"
    )

    def _run(self, cnpjs: str) -> str:        
        """Tarefa recebe uma LISTA DE CNPJS para verificar se os CNPJs existem na base"""
        cnpj_list = cnpjs.split(', ')
        conv_cnpjs = str(cnpj_list).replace('[', '').replace(']', '')
        server = '108.181.193.29,1433'
        usr = 'usergpt'
        pwd = 'Utprj90!'
        catalog = 'S360-FIEMA-DSV'
        cnxn = pyodbc.connect('DRIVER={ODBC Driver 17 for SQL Server};'+f'Server={server};Database={catalog};uid={usr};pwd={pwd}')
        query = f"""select cnpj from pessoa where codigo in (
        {conv_cnpjs}
        )"""
        dados_db = pd.read_sql(query, cnxn)
        
        return {
            "dadosNoBancoDeDados": dados_db.to_dict(),
            "dadosRecebidosDaReceita": cnpj_list
        }
    
def CalbackStep(args):
    test = input("a")
    if response := st.chat_input(args.result):
    # Display user message in chat message container
        with st.chat_message("user"):
            st.markdown(response)
        # Add user message to chat history
        st.session_state.messages.append({"role": "user", "content": response})


class CustomHandler(BaseCallbackHandler):
    """A custom handler for logging interactions within the process chain."""
    
    def __init__(self, agent_name: str):
        super().__init__()
        self.agent_name = agent_name

    def on_chain_start(self, serialized: Dict[str, Any], outputs: Dict[str, Any], **kwargs: Any):
        """Log the start of a chain with user input."""
        st.session_state.messages.append({"role": "assistant", "content": outputs['input']})
        st.chat_message("assistant").write(outputs['input'])

    def on_agent_action(self, serialized: Dict[str, Any], inputs: Dict[str, Any], **kwargs: Any):
        """Log the action taken by an agent during a chain run."""
        st.session_state.messages.append({"role": "assistant", "content": inputs['input']})
        st.chat_message("assistant").write(inputs['input'])

    def on_chain_end(self, outputs: Dict[str, Any], **kwargs: Any):
        """Log the end of a chain with the output generated by an agent."""
        st.session_state.messages.append({"role": self.agent_name, "content": outputs['output']})
        st.chat_message(self.agent_name).write(outputs['output'])
